{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tokmo\\\\fake-news-detectorv1\\\\frontend\\\\src\\\\components\\\\AdminRoute.js\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { AuthContext } from '../contexts/AuthContext';\n\n/**\r\n * AdminRoute - компонент для защиты маршрутов, доступных только администраторам\r\n * Проверяет наличие пользователя и его роль - если не admin, перенаправляет на главную\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminRoute = ({\n  element\n}) => {\n  _s();\n  const {\n    currentUser,\n    loading\n  } = useContext(AuthContext);\n\n  // Показываем индикатор загрузки, пока проверяем пользователя\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-center min-h-screen\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-600\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Проверяем, авторизован ли пользователь и является ли он администратором\n  if (!currentUser || currentUser.role !== 'admin') {\n    // Если пользователь не admin, перенаправляем на главную\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Если пользователь admin, показываем запрошенный компонент\n  return element;\n};\n_s(AdminRoute, \"CjcgYKvE1fHrpIpZCZsawF61wbc=\");\n_c = AdminRoute;\nexport default AdminRoute;\nvar _c;\n$RefreshReg$(_c, \"AdminRoute\");","map":{"version":3,"names":["React","useContext","Navigate","AuthContext","jsxDEV","_jsxDEV","AdminRoute","element","_s","currentUser","loading","className","children","fileName","_jsxFileName","lineNumber","columnNumber","role","to","replace","_c","$RefreshReg$"],"sources":["C:/Users/tokmo/fake-news-detectorv1/frontend/src/components/AdminRoute.js"],"sourcesContent":["import React, { useContext } from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport { AuthContext } from '../contexts/AuthContext';\r\n\r\n/**\r\n * AdminRoute - компонент для защиты маршрутов, доступных только администраторам\r\n * Проверяет наличие пользователя и его роль - если не admin, перенаправляет на главную\r\n */\r\nconst AdminRoute = ({ element }) => {\r\n  const { currentUser, loading } = useContext(AuthContext);\r\n  \r\n  // Показываем индикатор загрузки, пока проверяем пользователя\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-600\"></div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  // Проверяем, авторизован ли пользователь и является ли он администратором\r\n  if (!currentUser || currentUser.role !== 'admin') {\r\n    // Если пользователь не admin, перенаправляем на главную\r\n    return <Navigate to=\"/\" replace />;\r\n  }\r\n  \r\n  // Если пользователь admin, показываем запрошенный компонент\r\n  return element;\r\n};\r\n\r\nexport default AdminRoute; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,WAAW,QAAQ,yBAAyB;;AAErD;AACA;AACA;AACA;AAHA,SAAAC,MAAA,IAAAC,OAAA;AAIA,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAClC,MAAM;IAAEC,WAAW;IAAEC;EAAQ,CAAC,GAAGT,UAAU,CAACE,WAAW,CAAC;;EAExD;EACA,IAAIO,OAAO,EAAE;IACX,oBACEL,OAAA;MAAKM,SAAS,EAAC,+CAA+C;MAAAC,QAAA,eAC5DP,OAAA;QAAKM,SAAS,EAAC;MAA2E;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9F,CAAC;EAEV;;EAEA;EACA,IAAI,CAACP,WAAW,IAAIA,WAAW,CAACQ,IAAI,KAAK,OAAO,EAAE;IAChD;IACA,oBAAOZ,OAAA,CAACH,QAAQ;MAACgB,EAAE,EAAC,GAAG;MAACC,OAAO;IAAA;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACpC;;EAEA;EACA,OAAOT,OAAO;AAChB,CAAC;AAACC,EAAA,CApBIF,UAAU;AAAAc,EAAA,GAAVd,UAAU;AAsBhB,eAAeA,UAAU;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}